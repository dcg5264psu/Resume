
import java.sql.Connection;
import java.sql.Date;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import javax.swing.DefaultComboBoxModel;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 *
 * @author Devin Gilmore
 */
public class RoomSchdulerGUI extends javax.swing.JDialog {

    /**
     * Creates new form RoomSchdulerGUI
     */
    //Create variables.
    private ResultSet facultyCheckResult;
    private ResultSet reservationResultSet;
    private ResultSet waitListResultSetFac;
    private ResultSet waitListCheckResult;
    private ResultSet waitListResultSet;
    private ResultSet roomGetterResultSet;
    private ResultSet facreservationResultSet;
    private static Connection connection;
    private ArrayList<String> listOfFaculty;
    private PreparedStatement facultycheck;
    private PreparedStatement roomGetter;
    private PreparedStatement waitListCheck;
    private PreparedStatement reservationStatus;
    private PreparedStatement waitListStatus;
    private PreparedStatement reservationStatusFac;
    private PreparedStatement waitListStatusFac;

    public RoomSchdulerGUI(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        reserveTab = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        inputFacultyName = new javax.swing.JTextField();
        addFacultyButton = new javax.swing.JButton();
        statusAddFaculty = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        roomNametextbox = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        numSeatsTextBox = new javax.swing.JTextField();
        addRoom = new javax.swing.JButton();
        jLabel9 = new javax.swing.JLabel();
        DateSpinner = new javax.swing.JSpinner();
        jLabel10 = new javax.swing.JLabel();
        addDatebutton = new javax.swing.JButton();
        addRoomLabel = new javax.swing.JLabel();
        addDateLabel = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        seatTextFeild = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        statusAfterReservation = new javax.swing.JLabel();
        reserveButton = new javax.swing.JButton();
        dateSelecter = new javax.swing.JComboBox();
        facualtyChooser = new javax.swing.JComboBox();
        reserveLabel = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        waitListTextArea = new javax.swing.JTextArea();
        waitlistComboBoxSelector = new javax.swing.JComboBox();
        jPanel4 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        statusTextArea = new javax.swing.JTextArea();
        dateChooserStatus = new javax.swing.JComboBox();
        jPanel5 = new javax.swing.JPanel();
        facultyReservationDrop = new javax.swing.JComboBox();
        roomDropCombo = new javax.swing.JComboBox();
        cancelButton = new javax.swing.JButton();
        dropRoomButton = new javax.swing.JButton();
        dateResRemove = new javax.swing.JComboBox();
        roomDropLabel = new javax.swing.JLabel();
        dropResLabel = new javax.swing.JLabel();
        jPanel6 = new javax.swing.JPanel();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        facultyStatusReserved = new javax.swing.JTextArea();
        jScrollPane4 = new javax.swing.JScrollPane();
        facultyStatusWaitlist = new javax.swing.JTextArea();
        facultyDropDown = new javax.swing.JComboBox();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Calibri", 0, 48)); // NOI18N
        jLabel1.setText("Room Scheduler");

        reserveTab.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                reserveTabMouseClicked(evt);
            }
        });

        jLabel2.setText("Add Faculty:");

        inputFacultyName.setColumns(20);

        addFacultyButton.setText("Add");
        addFacultyButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addFacultyButtonActionPerformed(evt);
            }
        });

        statusAddFaculty.setText("   ");

        jLabel6.setText("Add Room:");

        jLabel7.setText("Faculty Name:");

        roomNametextbox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                roomNametextboxActionPerformed(evt);
            }
        });

        jLabel8.setText("Enter Room Name:");

        numSeatsTextBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                numSeatsTextBoxActionPerformed(evt);
            }
        });

        addRoom.setText("Add");
        addRoom.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addRoomActionPerformed(evt);
            }
        });

        jLabel9.setText("Enter Number of Seats:");

        DateSpinner.setModel(new javax.swing.SpinnerDateModel(new java.util.Date(1623705060000L), null, null, java.util.Calendar.HOUR_OF_DAY));

        jLabel10.setText("Add Date:");

        addDatebutton.setText("Add");
        addDatebutton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addDatebuttonActionPerformed(evt);
            }
        });

        addRoomLabel.setText("     ");

        addDateLabel.setText("     ");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(72, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addGap(270, 270, 270))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel9)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(numSeatsTextBox, javax.swing.GroupLayout.PREFERRED_SIZE, 224, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel8)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(roomNametextbox, javax.swing.GroupLayout.PREFERRED_SIZE, 224, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(addRoom)
                        .addGap(132, 132, 132))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(DateSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(addDatebutton)
                        .addGap(180, 180, 180))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel10)
                        .addGap(295, 295, 295))))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(addRoomLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 507, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(124, 124, 124)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel7)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(inputFacultyName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(addFacultyButton))
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(statusAddFaculty, javax.swing.GroupLayout.PREFERRED_SIZE, 375, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                    .addGap(5, 5, 5)
                                    .addComponent(jLabel6)
                                    .addGap(145, 145, 145)))))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(72, 72, 72)
                        .addComponent(addDateLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 439, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(inputFacultyName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(addFacultyButton)
                    .addComponent(jLabel7))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(statusAddFaculty)
                .addGap(18, 18, 18)
                .addComponent(jLabel6)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(roomNametextbox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel8))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(numSeatsTextBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(addRoom)
                    .addComponent(jLabel9))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(addRoomLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 28, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel10)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(DateSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(addDatebutton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(addDateLabel)
                .addContainerGap())
        );

        reserveTab.addTab("Add", jPanel1);

        jLabel3.setText("Faculty");

        jLabel4.setText("Number of Seats Required");

        jLabel5.setText("Date Requesting");

        statusAfterReservation.setText("  ");

        reserveButton.setText("Reserve");
        reserveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                reserveButtonActionPerformed(evt);
            }
        });

        dateSelecter.setModel(new DefaultComboBoxModel(Dates.getAllDates().toArray()));
        dateSelecter.addContainerListener(new java.awt.event.ContainerAdapter() {
            public void componentAdded(java.awt.event.ContainerEvent evt) {
                dateSelecterComponentAdded(evt);
            }
        });
        dateSelecter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dateSelecterActionPerformed(evt);
            }
        });

        facualtyChooser.setModel(new DefaultComboBoxModel(Faculty.getAllFaculty().toArray()));
        facualtyChooser.addContainerListener(new java.awt.event.ContainerAdapter() {
            public void componentAdded(java.awt.event.ContainerEvent evt) {
                facualtyChooserComponentAdded(evt);
            }
        });
        facualtyChooser.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                facualtyChooserMouseClicked(evt);
            }
        });
        facualtyChooser.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                facualtyChooserActionPerformed(evt);
            }
        });

        reserveLabel.setText("     ");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(reserveButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(statusAfterReservation, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(seatTextFeild, javax.swing.GroupLayout.DEFAULT_SIZE, 94, Short.MAX_VALUE)
                            .addComponent(dateSelecter, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(facualtyChooser, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel3)
                            .addComponent(jLabel4)
                            .addComponent(jLabel5)))
                    .addComponent(reserveLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(343, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(facualtyChooser, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(dateSelecter, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(seatTextFeild, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(statusAfterReservation)
                    .addComponent(reserveButton))
                .addGap(38, 38, 38)
                .addComponent(reserveLabel)
                .addContainerGap(108, Short.MAX_VALUE))
        );

        reserveTab.addTab("Reserve", jPanel2);

        waitListTextArea.setColumns(20);
        waitListTextArea.setRows(5);
        jScrollPane2.setViewportView(waitListTextArea);

        waitlistComboBoxSelector.setModel(new DefaultComboBoxModel(Dates.getAllDates().toArray()));
        waitlistComboBoxSelector.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                waitlistComboBoxSelectorActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 447, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(waitlistComboBoxSelector, javax.swing.GroupLayout.PREFERRED_SIZE, 133, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(43, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(waitlistComboBoxSelector, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(275, Short.MAX_VALUE))
            .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.TRAILING)
        );

        reserveTab.addTab("Waitlist", jPanel3);

        statusTextArea.setColumns(20);
        statusTextArea.setRows(5);
        jScrollPane1.setViewportView(statusTextArea);

        dateChooserStatus.setModel(new DefaultComboBoxModel(Dates.getAllDates().toArray()));
        dateChooserStatus.addContainerListener(new java.awt.event.ContainerAdapter() {
            public void componentAdded(java.awt.event.ContainerEvent evt) {
                dateChooserStatusComponentAdded(evt);
            }
        });
        dateChooserStatus.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dateChooserStatusActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 448, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(dateChooserStatus, javax.swing.GroupLayout.PREFERRED_SIZE, 133, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(42, 42, 42))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(dateChooserStatus, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 310, Short.MAX_VALUE)
        );

        reserveTab.addTab("Reservations", jPanel4);

        facultyReservationDrop.setModel(new DefaultComboBoxModel(ReservationEntry.findReservationFaculty().toArray()));
        facultyReservationDrop.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                facultyReservationDropActionPerformed(evt);
            }
        });

        roomDropCombo.setModel(new DefaultComboBoxModel(RoomQueries.getAllRooms().toArray()));

        cancelButton.setText("Cancel Res");
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelButtonActionPerformed(evt);
            }
        });

        dropRoomButton.setText("Drop Room");
        dropRoomButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dropRoomButtonActionPerformed(evt);
            }
        });

        dateResRemove.setModel(new DefaultComboBoxModel(Dates.getAllDates().toArray()));

        roomDropLabel.setText("    ");

        dropResLabel.setText("  ");

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addComponent(roomDropCombo, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(dropRoomButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(roomDropLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(facultyReservationDrop, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel5Layout.createSequentialGroup()
                                .addComponent(dateResRemove, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(cancelButton)))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addComponent(dropResLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 591, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 39, Short.MAX_VALUE))
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(roomDropCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(dropRoomButton)
                    .addComponent(roomDropLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(facultyReservationDrop, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(dateResRemove, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cancelButton))
                .addGap(18, 18, 18)
                .addComponent(dropResLabel)
                .addContainerGap(177, Short.MAX_VALUE))
        );

        reserveTab.addTab("Remove", jPanel5);

        jLabel11.setText("Reserved");

        jLabel12.setText("WaitListed");

        facultyStatusReserved.setColumns(20);
        facultyStatusReserved.setRows(5);
        jScrollPane3.setViewportView(facultyStatusReserved);

        facultyStatusWaitlist.setColumns(20);
        facultyStatusWaitlist.setRows(5);
        jScrollPane4.setViewportView(facultyStatusWaitlist);

        facultyDropDown.setModel(new DefaultComboBoxModel(Faculty.getAllFaculty().toArray()));
        facultyDropDown.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                facultyDropDownActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 475, Short.MAX_VALUE)
                    .addComponent(jScrollPane3)
                    .addComponent(jLabel11, javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel12, javax.swing.GroupLayout.Alignment.LEADING))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(facultyDropDown, 0, 119, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel11)
                .addGap(2, 2, 2)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(facultyDropDown, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel12)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        reserveTab.addTab("Status Faculty", jPanel6);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel1)
                .addGap(168, 168, 168))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(reserveTab)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addComponent(reserveTab, javax.swing.GroupLayout.PREFERRED_SIZE, 340, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(32, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void facualtyChooserActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_facualtyChooserActionPerformed
        // TODO add your handling code here:

    }//GEN-LAST:event_facualtyChooserActionPerformed

    private void addFacultyButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addFacultyButtonActionPerformed
        // TODO add your handling code here:
        //get input and pass to the add faculty.
        String name = inputFacultyName.getText();
        Faculty.addFaculty(name);
        //display that the name has been added
        statusAddFaculty.setText(name + " has been added to the Faculty Database.");
        listOfFaculty = Faculty.getAllFaculty();
        facualtyChooser.setModel(new DefaultComboBoxModel(listOfFaculty.toArray()));
        facultyDropDown.setModel(new DefaultComboBoxModel(Faculty.getAllFaculty().toArray()));
    }//GEN-LAST:event_addFacultyButtonActionPerformed

    private void facualtyChooserMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_facualtyChooserMouseClicked
        // TODO add your handling code here:

    }//GEN-LAST:event_facualtyChooserMouseClicked

    private void dateSelecterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dateSelecterActionPerformed

    }//GEN-LAST:event_dateSelecterActionPerformed

    private void facualtyChooserComponentAdded(java.awt.event.ContainerEvent evt) {//GEN-FIRST:event_facualtyChooserComponentAdded
        // TODO add your handling code here:
        //display the faculty in the combo box
        listOfFaculty = Faculty.getAllFaculty();
        facualtyChooser.setModel(new DefaultComboBoxModel(listOfFaculty.toArray()));

    }//GEN-LAST:event_facualtyChooserComponentAdded

    private void dateSelecterComponentAdded(java.awt.event.ContainerEvent evt) {//GEN-FIRST:event_dateSelecterComponentAdded

    }//GEN-LAST:event_dateSelecterComponentAdded

    private void reserveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_reserveButtonActionPerformed
        // TODO add your handling code here:

        //get connection and retrieve info from reservation database to check if the faculty has already reserved a room.
        connection = DBConnection.getConnection();
        try {
            facultycheck = connection.prepareStatement("select faculty, date from reservation where faculty = ? and date = ?");
            facultycheck.setString(1, facualtyChooser.getSelectedItem().toString());
            facultycheck.setDate(2, Date.valueOf(dateSelecter.getSelectedItem().toString()));

            facultyCheckResult = facultycheck.executeQuery();

            if (facultyCheckResult.next()) {

                reserveLabel.setText("The selected Faculty already has a room reserved for the date requested. No reservation was made.");

            } //If no rooms are in the arrayList that means that either the seats were too high or that all the rooms had been reserved.
            else if (RoomQueries.getAllPossibleRooms(Date.valueOf(dateSelecter.getSelectedItem().toString()), Integer.parseInt(seatTextFeild.getText())).isEmpty()) {
                //check if the faculty is on the waitlist.

                connection = DBConnection.getConnection();

                waitListCheck = connection.prepareStatement("select faculty, date from waitlist where faculty = ? and date = ?");
                waitListCheck.setString(1, facualtyChooser.getSelectedItem().toString());
                waitListCheck.setDate(2, Date.valueOf(dateSelecter.getSelectedItem().toString()));

                waitListCheckResult = facultycheck.executeQuery();
                if (waitListCheckResult.next()) {

                    reserveLabel.setText("That entry already exists on the waitlist.");

                } //add them to the waitlist when there are no rooms available.
                else {
                    WaitListEntry.addWaitList(facualtyChooser.getSelectedItem().toString(), Date.valueOf(dateSelecter.getSelectedItem().toString()), Integer.parseInt(seatTextFeild.getText()));
                    reserveLabel.setText("There are no rooms with enough seats available on that date. Your request has been added to the waitlist.");
                }
            } //if there are available rooms make a reservation.
            else {

                ReservationEntry.AddReservation(facualtyChooser.getSelectedItem().toString(), Date.valueOf(dateSelecter.getSelectedItem().toString()), Integer.parseInt(seatTextFeild.getText()));
                //find out what room had been reserved for the request.
                roomGetter = connection.prepareStatement("select room from reservation where faculty = ? and date = ?");
                roomGetter.setString(1, facualtyChooser.getSelectedItem().toString());
                roomGetter.setDate(2, Date.valueOf(dateSelecter.getSelectedItem().toString()));

                roomGetterResultSet = roomGetter.executeQuery();
                //display the reservation to user.
                while (roomGetterResultSet.next()) {
                    String roomName = roomGetterResultSet.getString("room");

                    reserveLabel.setText("Your reservation has been made for room " + roomName + ".");
                }

            }

        } catch (SQLException sqlException) {
            sqlException.printStackTrace();
        }

        facultyReservationDrop.setModel(new DefaultComboBoxModel(ReservationEntry.findReservationFaculty().toArray()));

    }//GEN-LAST:event_reserveButtonActionPerformed

    private void reserveTabMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_reserveTabMouseClicked
        // TODO add your handling code here:
        try {
            //when the tab is clicked display the first date that is automatically chosen to the screens.
            //display the reservation tab status
            connection = DBConnection.getConnection();
            reservationStatus = connection.prepareStatement("select * from reservation where date = ? order by date");

            reservationStatus.setString(1, dateChooserStatus.getSelectedItem().toString());
            reservationResultSet = reservationStatus.executeQuery();
            String reservationList = new String();
            //set the column titles.
            reservationList = ("Room        Date           Faculty        TimeStamp                  Seats\n");
            //run through the reservations and dispay them in order of date.
            while (reservationResultSet.next()) {

                reservationList += reservationResultSet.getString("room") + "      "
                        + reservationResultSet.getDate("date").toString() + "      " + reservationResultSet.getString("faculty") + "      "
                        + reservationResultSet.getTimestamp("timestamp").toString()
                        + "      " + reservationResultSet.getInt("seats") + "\n";

            }
            statusTextArea.setText(reservationList);

            //display the waitlist
            connection = DBConnection.getConnection();
            waitListStatus = connection.prepareStatement("select * from waitlist where date = ? order by timestamp");

            waitListStatus.setString(1, waitlistComboBoxSelector.getSelectedItem().toString());
            waitListResultSet = waitListStatus.executeQuery();
            String waitlistList = new String();
            //display the title to the screen.
            waitlistList = ("Date           Faculty        TimeStamp                          Seats\n");
            //run through waitlist by date and then order them by timestamp.
            while (waitListResultSet.next()) {

                waitlistList += waitListResultSet.getDate("date").toString() + "      " + waitListResultSet.getString("faculty") + "      "
                        + waitListResultSet.getTimestamp("timestamp").toString()
                        + "      " + waitListResultSet.getInt("seats") + "\n";

            }
            waitListTextArea.setText(waitlistList);

        } catch (SQLException sqlException) {
            sqlException.printStackTrace();
        }

        try {

            connection = DBConnection.getConnection();
            reservationStatusFac = connection.prepareStatement("select * from reservation where faculty = ? order by date");

            reservationStatusFac.setString(1, facultyDropDown.getSelectedItem().toString());
            facreservationResultSet = reservationStatusFac.executeQuery();
            String reservationListFac = new String();
            //set the column titles.
            reservationListFac = ("Room        Date           Faculty        TimeStamp                  Seats\n");
            //run through the reservations and dispay them in order of date.
            while (facreservationResultSet.next()) {

                reservationListFac += facreservationResultSet.getString("room") + "      "
                        + facreservationResultSet.getDate("date").toString() + "      " + facreservationResultSet.getString("faculty") + "      "
                        + facreservationResultSet.getTimestamp("timestamp").toString()
                        + "      " + facreservationResultSet.getInt("seats") + "\n";

            }
            facultyStatusReserved.setText(reservationListFac);

            connection = DBConnection.getConnection();
            waitListStatusFac = connection.prepareStatement("select * from waitlist where faculty = ? order by timestamp");

            waitListStatusFac.setString(1, facultyDropDown.getSelectedItem().toString());
            waitListResultSetFac = waitListStatusFac.executeQuery();
            String waitlistListFac = new String();
            //display the title to the screen.
            waitlistListFac = ("Date           Faculty        TimeStamp                          Seats\n");
            //run through waitlist by faculty and then order them by timestamp.
            while (waitListResultSetFac.next()) {

                waitlistListFac += waitListResultSetFac.getDate("date").toString() + "      " + waitListResultSetFac.getString("faculty") + "      "
                        + waitListResultSetFac.getTimestamp("timestamp").toString()
                        + "      " + waitListResultSetFac.getInt("seats") + "\n";

            }
            facultyStatusWaitlist.setText(waitlistListFac);

        } catch (SQLException sqlException) {
            sqlException.printStackTrace();
        }

    }//GEN-LAST:event_reserveTabMouseClicked

    private void dateChooserStatusActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dateChooserStatusActionPerformed
        // TODO add your handling code here:
        //update through same code when a different date is chosen to the status area.
        try {

            connection = DBConnection.getConnection();
            reservationStatus = connection.prepareStatement("select * from reservation where date = ? order by date");

            reservationStatus.setString(1, dateChooserStatus.getSelectedItem().toString());
            reservationResultSet = reservationStatus.executeQuery();
            String reservationList = new String();
            reservationList = ("Room        Date           Faculty        TimeStamp                  Seats\n");
            while (reservationResultSet.next()) {

                reservationList += reservationResultSet.getString("room") + "      "
                        + reservationResultSet.getDate("date").toString() + "      " + reservationResultSet.getString("faculty") + "      "
                        + reservationResultSet.getTimestamp("timestamp").toString()
                        + "      " + reservationResultSet.getInt("seats") + "\n";

            }
            statusTextArea.setText(reservationList);

        } catch (SQLException sqlException) {
            sqlException.printStackTrace();
        }


    }//GEN-LAST:event_dateChooserStatusActionPerformed

    private void dateChooserStatusComponentAdded(java.awt.event.ContainerEvent evt) {//GEN-FIRST:event_dateChooserStatusComponentAdded
        // TODO add your handling code here:
    }//GEN-LAST:event_dateChooserStatusComponentAdded

    private void waitlistComboBoxSelectorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_waitlistComboBoxSelectorActionPerformed
        // TODO add your handling code here:

        //update through same code when a different date is chosen to the status area.
        try {

            connection = DBConnection.getConnection();
            waitListStatus = connection.prepareStatement("select * from waitlist where date = ? order by timestamp");

            waitListStatus.setString(1, waitlistComboBoxSelector.getSelectedItem().toString());
            waitListResultSet = waitListStatus.executeQuery();
            String waitlistList = new String();
            waitlistList = ("Date           Faculty        TimeStamp                          Seats\n");
            while (waitListResultSet.next()) {

                waitlistList += waitListResultSet.getDate("date").toString() + "      " + waitListResultSet.getString("faculty") + "      "
                        + waitListResultSet.getTimestamp("timestamp").toString()
                        + "      " + waitListResultSet.getInt("seats") + "\n";

            }
            waitListTextArea.setText(waitlistList);

        } catch (SQLException sqlException) {
            sqlException.printStackTrace();
        }


    }//GEN-LAST:event_waitlistComboBoxSelectorActionPerformed

    private void roomNametextboxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_roomNametextboxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_roomNametextboxActionPerformed

    private void numSeatsTextBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_numSeatsTextBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_numSeatsTextBoxActionPerformed

    private void addDatebuttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addDatebuttonActionPerformed
        // TODO add your handling code here:
        //put in the spinner
        SimpleDateFormat formater = new SimpleDateFormat("yyyy-MM-dd");
        String spinnerValue = formater.format(DateSpinner.getValue());
        Date day = Date.valueOf(spinnerValue);
        //add the date and redo the model
        Dates.addDate(day);

        addDateLabel.setText(spinnerValue + " has been added.");
        dateSelecter.setModel(new DefaultComboBoxModel(Dates.getAllDates().toArray()));
        waitlistComboBoxSelector.setModel(new DefaultComboBoxModel(Dates.getAllDates().toArray()));
        dateChooserStatus.setModel(new DefaultComboBoxModel(Dates.getAllDates().toArray()));

    }//GEN-LAST:event_addDatebuttonActionPerformed

    private void dropRoomButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dropRoomButtonActionPerformed
        // TODO add your handling code here:
        //drop room 
        //get info and pass onto function while displaying msg to user.
        String room = roomDropCombo.getSelectedItem().toString();

        RoomEntry.RemoveRoom(room);

        roomDropLabel.setText("Room " + room + " has been removed. Reservations were added to the waitlist.");

        roomDropCombo.setModel(new DefaultComboBoxModel(RoomQueries.getAllRooms().toArray()));

    }//GEN-LAST:event_dropRoomButtonActionPerformed

    private void facultyReservationDropActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_facultyReservationDropActionPerformed
        // TODO add your handling code here:
        //update comboBox
        dateResRemove.setModel(new DefaultComboBoxModel(ReservationEntry.findReservationDate(facultyReservationDrop.getSelectedItem().toString()).toArray()));
    }//GEN-LAST:event_facultyReservationDropActionPerformed

    private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButtonActionPerformed
        // TODO add your handling code here:
        //get info and pass to drop res.
        String faculty = facultyReservationDrop.getSelectedItem().toString();
        Date date = Date.valueOf(dateResRemove.getSelectedItem().toString());
        ReservationEntry.dropReservation(date, faculty);
        //update the combo boxes and display what happened to the user.
        dropResLabel.setText("Selected Reservation was removed and any waitlist entries applicable took the room.");

        dateResRemove.setModel(new DefaultComboBoxModel(ReservationEntry.findReservationDate(facultyReservationDrop.getSelectedItem().toString()).toArray()));
    }//GEN-LAST:event_cancelButtonActionPerformed

    private void addRoomActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addRoomActionPerformed
        // TODO add your handling code here:
        //pass info and add room.
        String name = roomNametextbox.getText();
        int seats = Integer.parseInt(numSeatsTextBox.getText());
        RoomEntry.addRoom(name, seats);
        //update user.
        addRoomLabel.setText("Room " + name + " has been added and reservations have been made in the room.");
        roomDropCombo.setModel(new DefaultComboBoxModel(RoomQueries.getAllRooms().toArray()));

    }//GEN-LAST:event_addRoomActionPerformed

    private void facultyDropDownActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_facultyDropDownActionPerformed
        // TODO add your handling code here:

        //update same code but different action.
        try {

            connection = DBConnection.getConnection();
            reservationStatusFac = connection.prepareStatement("select * from reservation where faculty = ? order by date");

            reservationStatusFac.setString(1, facultyDropDown.getSelectedItem().toString());
            facreservationResultSet = reservationStatusFac.executeQuery();
            String reservationListFac = new String();
            //set the column titles.
            reservationListFac = ("Room        Date           Faculty        TimeStamp                  Seats\n");
            //run through the reservations and dispay them in order of date.
            while (facreservationResultSet.next()) {

                reservationListFac += facreservationResultSet.getString("room") + "      "
                        + facreservationResultSet.getDate("date").toString() + "      " + facreservationResultSet.getString("faculty") + "      "
                        + facreservationResultSet.getTimestamp("timestamp").toString()
                        + "      " + facreservationResultSet.getInt("seats") + "\n";

            }
            facultyStatusReserved.setText(reservationListFac);

            connection = DBConnection.getConnection();
            waitListStatusFac = connection.prepareStatement("select * from waitlist where faculty = ? order by timestamp");

            waitListStatusFac.setString(1, facultyDropDown.getSelectedItem().toString());
            waitListResultSetFac = waitListStatusFac.executeQuery();
            String waitlistListFac = new String();
            //display the title to the screen.
            waitlistListFac = ("Date           Faculty        TimeStamp                          Seats\n");
            //run through waitlist by date and then order them by timestamp.
            while (waitListResultSetFac.next()) {

                waitlistListFac += waitListResultSetFac.getDate("date").toString() + "      " + waitListResultSetFac.getString("faculty") + "      "
                        + waitListResultSetFac.getTimestamp("timestamp").toString()
                        + "      " + waitListResultSetFac.getInt("seats") + "\n";

            }
            facultyStatusWaitlist.setText(waitlistListFac);

        } catch (SQLException sqlException) {
            sqlException.printStackTrace();
        }

    }//GEN-LAST:event_facultyDropDownActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(RoomSchdulerGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(RoomSchdulerGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(RoomSchdulerGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(RoomSchdulerGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                RoomSchdulerGUI dialog = new RoomSchdulerGUI(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JSpinner DateSpinner;
    private javax.swing.JLabel addDateLabel;
    private javax.swing.JButton addDatebutton;
    private javax.swing.JButton addFacultyButton;
    private javax.swing.JButton addRoom;
    private javax.swing.JLabel addRoomLabel;
    private javax.swing.JButton cancelButton;
    private javax.swing.JComboBox dateChooserStatus;
    private javax.swing.JComboBox dateResRemove;
    private javax.swing.JComboBox dateSelecter;
    private javax.swing.JLabel dropResLabel;
    private javax.swing.JButton dropRoomButton;
    private javax.swing.JComboBox facualtyChooser;
    private javax.swing.JComboBox facultyDropDown;
    private javax.swing.JComboBox facultyReservationDrop;
    private javax.swing.JTextArea facultyStatusReserved;
    private javax.swing.JTextArea facultyStatusWaitlist;
    private javax.swing.JTextField inputFacultyName;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JTextField numSeatsTextBox;
    private javax.swing.JButton reserveButton;
    private javax.swing.JLabel reserveLabel;
    private javax.swing.JTabbedPane reserveTab;
    private javax.swing.JComboBox roomDropCombo;
    private javax.swing.JLabel roomDropLabel;
    private javax.swing.JTextField roomNametextbox;
    private javax.swing.JTextField seatTextFeild;
    private javax.swing.JLabel statusAddFaculty;
    private javax.swing.JLabel statusAfterReservation;
    private javax.swing.JTextArea statusTextArea;
    private javax.swing.JTextArea waitListTextArea;
    private javax.swing.JComboBox waitlistComboBoxSelector;
    // End of variables declaration//GEN-END:variables
}
